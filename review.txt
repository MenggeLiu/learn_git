=====本地git操作，可方便管理本地一个分支的代码文件=====

git init # 初始化一个git仓库

git add "filename" # 添加新文件到git仓库

git commit -m “massage” # 将文件提交到代码仓库，并添加说明

git status # 查看当前工作树状态

git diff "filename" # 查看修改的文件的具体修改内容

git log --pretty=oneline # 查看修改日志，每次修改一行

git reset --hard HEAD^ # 退回到上一步

git reset --hard "版本号" # 退回到指定版本，可用git log 查询，只要能找到版本号就可以自由切换

git reflog # 如果退回到之前版本，又想恢复新版本，而之前的窗口已经关闭无法查看之前的残留信息，可用该命令来查看所有的历史命令

git 跟踪的是修改而不是文件，比如在第一次修改并add后第二次修改了文件，commit并不会提交第二次修改的内容，
	因为第二次的修改并没有存入暂存区，而commit只是将暂存区的内容提交

git checkout -- 'filename' # 丢弃工作区的修改内容，根据文件是否被add，如果未被add就退回到版本库，如果被add就退回到暂存区
	# 本质上是用版本库的文件来替换工作区的文件，可用于误删文件找回

git reset HEAD 'filename' # 如果工作已经提交到暂存区，可使用reset来将暂存区退回到工作区

git rm 'filename'  # 从版本库中删除文件

=====

=====远程仓库=====

利用GitHub作为远程仓库，来同步保存本地工作

首先需要注册github，创建公私钥来实现本地和远程的配对匹配

登录后创建新的代码仓，根据页面提醒，可同步本地代码仓，默认为origin分支

git push -u origin master # 把本地的所有内容推送到远程仓库（首次使用需要-u）

从远程仓库克隆时，先在GitHub创建一个仓库，然后使用git clone命令即可

git clone 'git-url' # 把代码仓克隆到本地

=====

=====分支管理=====

把每次的提交看作一条时间线，严格来讲HEAD并不指向某一次的提交，而是指向master分支（即主分支）
每次提交，master分支向前移动一步，HEAD也随着master而移动，创建新的dev分支时，本质上只是创建了一个新的指针

git checkout -b dev # 创建并切换到dev分支

git branch dev
git checkout dev # 创建并切换到dev分支（分两步）
# 感觉每次先确认工作区状态再进行切换分子较为合适，防止出现一些奇怪的事情

git merge dev # dev有了新的提交后，在master下可以合并dev的修改，相当于把master同步到dev的提交记录点

git switch -c dev # 创建并切换到dev分支，采用switch方法看起来更为科学

git switch master # 切换到已有的分支

----merge冲突解决----
git merge 可能会出现冲突，当两个分支对同一个文件的修改提交不一致的时候，需要手动解决冲突
git会自动将两个分支对于同一文件的修改合并，并以符号标记出两个分支的不同内容，这时手动修改文件确定要保存的内容
修改完成后，在当前分支的merge特殊分支下，add+commit提交确认后就完成了merge的冲突处理

分支完成合并后，基本完成任务，尽量及时删除不必要的分支，避免麻烦
git branch -d dev # 删除dev分支
----

git log --graph --pertty=oneline --abbrev-commit # 查看分支合并的情况

----采用no-ff方式合并分支----
git 在merge操作时会尽可能地使用fast forward方法，当dev分支创建和提交时间段中master分支没有发生变化，
在master下合并dev分支时直接移动指针即可，但这样合并后在master下无法看出对master的修改，
因为master下不存在相应的commit记录，而加入--no-ff后强制不使用fast forward方法，即可以在合并分支时，
在master下创建commit记录，对于master分支的修改可留下更多的痕迹，更容易复盘，更推荐使用--no-ff方法进行merge

git merge --no-ff -m "merge with no-ff" dev # merge时留下commit记录（-m）
----

----bug分支----
如果当前正在dev下工作，突然出现一个bug修复任务，而当前dev下有未完成未提交的工作，可将当前工作暂存
git stash # 将当前工作区的内容暂存，即可情况当前工作区

git switch -c bug-fix # 创建一个新的分支修复bug
git add + commit # 完成bug修复并提交
git merge --no-ff -m 'merge bug-fix' bug-fix # 将bug修复后在master下合并到master
git branch -d bug-fix # 完成修复工作，删除修复bug所用的分支

完成bug修复任务后回到dev分支可继续先前的工作，先前已将dev工作区的工作暂存，工作区为空
git stash list # 查看暂存的工作列表
git stash pop # 弹出暂存的工作内容到工作区，并删除stash的暂存

但是master下已经完成了一次bug修复工作，在dev下可以快速复制
git cherry-pick 'id' # id为master下合并bug-fix的commit id，可以快速在dev下复制相同的提交，完成dev分支的bug修复
----

git branch -d 'branch-name' # 强行删除一个未merge的分支，适用于被临时取消的开发任务

git remote # 查看远程库的分支信息

git remote # 查看远程库的详细信息，可看到抓取和推送的地址（有权限的情况下）








